# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import firmament_scheduler_pb2 as firmament__scheduler__pb2
import resource_stats_pb2 as resource__stats__pb2
import resource_topology_node_desc_pb2 as resource__topology__node__desc__pb2
import task_stats_pb2 as task__stats__pb2


class FirmamentSchedulerStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Schedule = channel.unary_unary(
        '/firmament.FirmamentScheduler/Schedule',
        request_serializer=firmament__scheduler__pb2.ScheduleRequest.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.SchedulingDeltas.FromString,
        )
    self.TaskCompleted = channel.unary_unary(
        '/firmament.FirmamentScheduler/TaskCompleted',
        request_serializer=firmament__scheduler__pb2.TaskUID.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskCompletedResponse.FromString,
        )
    self.TaskFailed = channel.unary_unary(
        '/firmament.FirmamentScheduler/TaskFailed',
        request_serializer=firmament__scheduler__pb2.TaskUID.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskFailedResponse.FromString,
        )
    self.TaskRemoved = channel.unary_unary(
        '/firmament.FirmamentScheduler/TaskRemoved',
        request_serializer=firmament__scheduler__pb2.TaskUID.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskRemovedResponse.FromString,
        )
    self.TaskSubmitted = channel.unary_unary(
        '/firmament.FirmamentScheduler/TaskSubmitted',
        request_serializer=firmament__scheduler__pb2.TaskDescription.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskSubmittedResponse.FromString,
        )
    self.TaskUpdated = channel.unary_unary(
        '/firmament.FirmamentScheduler/TaskUpdated',
        request_serializer=firmament__scheduler__pb2.TaskDescription.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskUpdatedResponse.FromString,
        )
    self.NodeAdded = channel.unary_unary(
        '/firmament.FirmamentScheduler/NodeAdded',
        request_serializer=resource__topology__node__desc__pb2.ResourceTopologyNodeDescriptor.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.NodeAddedResponse.FromString,
        )
    self.NodeFailed = channel.unary_unary(
        '/firmament.FirmamentScheduler/NodeFailed',
        request_serializer=firmament__scheduler__pb2.ResourceUID.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.NodeFailedResponse.FromString,
        )
    self.NodeRemoved = channel.unary_unary(
        '/firmament.FirmamentScheduler/NodeRemoved',
        request_serializer=firmament__scheduler__pb2.ResourceUID.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.NodeRemovedResponse.FromString,
        )
    self.NodeUpdated = channel.unary_unary(
        '/firmament.FirmamentScheduler/NodeUpdated',
        request_serializer=resource__topology__node__desc__pb2.ResourceTopologyNodeDescriptor.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.NodeUpdatedResponse.FromString,
        )
    self.AddTaskStats = channel.unary_unary(
        '/firmament.FirmamentScheduler/AddTaskStats',
        request_serializer=task__stats__pb2.TaskStats.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskStatsResponse.FromString,
        )
    self.AddNodeStats = channel.unary_unary(
        '/firmament.FirmamentScheduler/AddNodeStats',
        request_serializer=resource__stats__pb2.ResourceStats.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.ResourceStatsResponse.FromString,
        )
    self.Check = channel.unary_unary(
        '/firmament.FirmamentScheduler/Check',
        request_serializer=firmament__scheduler__pb2.HealthCheckRequest.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.HealthCheckResponse.FromString,
        )
    self.AddTaskInfo = channel.unary_unary(
        '/firmament.FirmamentScheduler/AddTaskInfo',
        request_serializer=firmament__scheduler__pb2.TaskInfo.SerializeToString,
        response_deserializer=firmament__scheduler__pb2.TaskInfoResponse.FromString,
        )


class FirmamentSchedulerServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Schedule(self, request, context):
    """Schedule sends a schedule request to firmament server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TaskCompleted(self, request, context):
    """TaskCompleted notifies firmament server the given task is completed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TaskFailed(self, request, context):
    """TaskFailed notifies firmament server the given task is failed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TaskRemoved(self, request, context):
    """TaskRemoved notifies firmament server the given task is removed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TaskSubmitted(self, request, context):
    """TaskSubmitted notifies firmament server the given task is submitted.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def TaskUpdated(self, request, context):
    """TaskUpdated notifies firmament server the given task is updated.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NodeAdded(self, request, context):
    """NodeAdded notifies firmament server the given node is added.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NodeFailed(self, request, context):
    """NodeFailed notifies firmament server the given node is failed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NodeRemoved(self, request, context):
    """NodeRemoved notifies firmament server the given node is removed.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def NodeUpdated(self, request, context):
    """NodeUpdated notifies firmament server the given node is updated.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddTaskStats(self, request, context):
    """AddTaskStats sends task status to firmament server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddNodeStats(self, request, context):
    """AddNodeStats sends node status to firmament server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Check(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def AddTaskInfo(self, request, context):
    """AddTaskInfo sends task status to firmament server.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_FirmamentSchedulerServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Schedule': grpc.unary_unary_rpc_method_handler(
          servicer.Schedule,
          request_deserializer=firmament__scheduler__pb2.ScheduleRequest.FromString,
          response_serializer=firmament__scheduler__pb2.SchedulingDeltas.SerializeToString,
      ),
      'TaskCompleted': grpc.unary_unary_rpc_method_handler(
          servicer.TaskCompleted,
          request_deserializer=firmament__scheduler__pb2.TaskUID.FromString,
          response_serializer=firmament__scheduler__pb2.TaskCompletedResponse.SerializeToString,
      ),
      'TaskFailed': grpc.unary_unary_rpc_method_handler(
          servicer.TaskFailed,
          request_deserializer=firmament__scheduler__pb2.TaskUID.FromString,
          response_serializer=firmament__scheduler__pb2.TaskFailedResponse.SerializeToString,
      ),
      'TaskRemoved': grpc.unary_unary_rpc_method_handler(
          servicer.TaskRemoved,
          request_deserializer=firmament__scheduler__pb2.TaskUID.FromString,
          response_serializer=firmament__scheduler__pb2.TaskRemovedResponse.SerializeToString,
      ),
      'TaskSubmitted': grpc.unary_unary_rpc_method_handler(
          servicer.TaskSubmitted,
          request_deserializer=firmament__scheduler__pb2.TaskDescription.FromString,
          response_serializer=firmament__scheduler__pb2.TaskSubmittedResponse.SerializeToString,
      ),
      'TaskUpdated': grpc.unary_unary_rpc_method_handler(
          servicer.TaskUpdated,
          request_deserializer=firmament__scheduler__pb2.TaskDescription.FromString,
          response_serializer=firmament__scheduler__pb2.TaskUpdatedResponse.SerializeToString,
      ),
      'NodeAdded': grpc.unary_unary_rpc_method_handler(
          servicer.NodeAdded,
          request_deserializer=resource__topology__node__desc__pb2.ResourceTopologyNodeDescriptor.FromString,
          response_serializer=firmament__scheduler__pb2.NodeAddedResponse.SerializeToString,
      ),
      'NodeFailed': grpc.unary_unary_rpc_method_handler(
          servicer.NodeFailed,
          request_deserializer=firmament__scheduler__pb2.ResourceUID.FromString,
          response_serializer=firmament__scheduler__pb2.NodeFailedResponse.SerializeToString,
      ),
      'NodeRemoved': grpc.unary_unary_rpc_method_handler(
          servicer.NodeRemoved,
          request_deserializer=firmament__scheduler__pb2.ResourceUID.FromString,
          response_serializer=firmament__scheduler__pb2.NodeRemovedResponse.SerializeToString,
      ),
      'NodeUpdated': grpc.unary_unary_rpc_method_handler(
          servicer.NodeUpdated,
          request_deserializer=resource__topology__node__desc__pb2.ResourceTopologyNodeDescriptor.FromString,
          response_serializer=firmament__scheduler__pb2.NodeUpdatedResponse.SerializeToString,
      ),
      'AddTaskStats': grpc.unary_unary_rpc_method_handler(
          servicer.AddTaskStats,
          request_deserializer=task__stats__pb2.TaskStats.FromString,
          response_serializer=firmament__scheduler__pb2.TaskStatsResponse.SerializeToString,
      ),
      'AddNodeStats': grpc.unary_unary_rpc_method_handler(
          servicer.AddNodeStats,
          request_deserializer=resource__stats__pb2.ResourceStats.FromString,
          response_serializer=firmament__scheduler__pb2.ResourceStatsResponse.SerializeToString,
      ),
      'Check': grpc.unary_unary_rpc_method_handler(
          servicer.Check,
          request_deserializer=firmament__scheduler__pb2.HealthCheckRequest.FromString,
          response_serializer=firmament__scheduler__pb2.HealthCheckResponse.SerializeToString,
      ),
      'AddTaskInfo': grpc.unary_unary_rpc_method_handler(
          servicer.AddTaskInfo,
          request_deserializer=firmament__scheduler__pb2.TaskInfo.FromString,
          response_serializer=firmament__scheduler__pb2.TaskInfoResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'firmament.FirmamentScheduler', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
